{"version":3,"sources":["components/header/header.component.jsx","components/searchBar/searchBar.component.jsx","components/dropdown/dropdown.component.jsx","utils/utils.js","components/country-item/country-item.component.jsx","components/country-list/country-list.component.jsx","utils/constants.js","pages/homepage/homepage.component.jsx","components/country-details/country-details.component.jsx","pages/country-details-page/country-details-page.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","state","lightMode","toggleTheme","setState","prevProps","prevState","html","document","querySelector","this","dataset","className","onClick","React","Component","SearchBar","props","handleChange","target","name","value","query","initData","filterCountries","trim","placeholder","type","aria-label","onChange","defaultProps","Dropdown","toggleDropdown","showItems","handleSelect","event","selectedItem","getSelectedItem","dropdownItems","map","region","key","data-value","persistToSession","data","window","sessionStorage","setItem","JSON","stringify","getSessionDataAsync","countries","parse","getItem","getCountries","request","Request","fetch","response","json","reduce","countryData","alpha3Code","formatNumberWithCommas","num","toString","reverse","acc","n","idx","getAllRegions","set","Object","keys","add","Set","addQueryParam","url","baseUrl","queryString","queryStartIndex","indexOf","substring","includes","replace","obj","queryMap","queryStrToObj","updatedQueryMap","str","querykey","split","kvPair","k","v","CountryItem","id","countryName","population","capital","flagImg","history","highlightDetails","formattedNumber","index","length","push","src","alt","withRouter","CountryList","country","flag","search","COUNTRY_REGIONS","HomePage","resetQuery","updateSearchQuery","searchQuery","getRegionFilter","regionQuery","urlWithRegionParam","location","setQueryString","timerId","clearTimeout","urlWithQueryParam","setTimeout","filterByRegion","filter","toLowerCase","filterBySearch","queryLength","escapedQuery","re","RegExp","decodeURIComponent","allRegions","countriesArray","sort","countryId","filteredCountries","CountryDetail","nativeName","subregion","topLevelDomain","_currencies","currencies","_languages","languages","_borders","borders","code","curr","lang","join","to","CountryDetailsPage","match","params","toUpperCase","updateState","prevCountryId","countryCode","App","exact","path","component","Boolean","hostname","ReactDOM","render","basename","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.45a27768.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './header.styles.scss';\r\n\r\nclass Header extends React.Component {\r\n    state = {\r\n        lightMode: true\r\n    };\r\n\r\n    toggleTheme = () => {\r\n        this.setState({ lightMode: !this.state.lightMode });\r\n    };\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        var html = document.querySelector('html');\r\n        if (this.state.lightMode) {\r\n            html.dataset['theme'] = '';\r\n        } else {\r\n            html.dataset['theme'] = 'dark';\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <header className=\"header\">\r\n                <div className=\"container\">\r\n                    <h3 className=\"title\">Where in the world?</h3>\r\n                    <span className=\"theme-switch\" onClick={this.toggleTheme}>\r\n                        {this.state.lightMode ? (\r\n                            <>\r\n                                <span className=\"mode-icon light-mode\">\r\n                                    <i className=\"fas fa-moon\"></i>\r\n                                </span>\r\n                                Dark Mode\r\n                            </>\r\n                        ) : (\r\n                            <>\r\n                                <span className=\"mode-icon dark-mode\">\r\n                                    <i className=\"fas fa-sun\"></i>\r\n                                </span>\r\n                                Light Mode\r\n                            </>\r\n                        )}\r\n                    </span>\r\n                </div>\r\n            </header>\r\n        );\r\n    }\r\n}\r\nexport default Header;\r\n","import React from 'react';\r\n\r\nimport './searchBar.styles.scss';\r\n\r\nclass SearchBar extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            query: this.props.initData || ''\r\n        };\r\n    }\r\n    static defaultProps = {\r\n        placeholder: 'Search for a country...'\r\n    };\r\n\r\n    handleChange = ({ target: { name, value } }) => {\r\n        this.setState({ [name]: value });\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.setState({ query: this.props.initData });\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        const query = this.state.query;\r\n\r\n        if (prevState.query !== query) {\r\n            this.props.filterCountries(this.state.query.trim());\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { placeholder } = this.props;\r\n        return (\r\n            <form className=\"search-bar\">\r\n                <i className=\"fas fa-search\"></i>\r\n                <input\r\n                    className=\"search-input\"\r\n                    name=\"query\"\r\n                    type=\"search\"\r\n                    aria-label={placeholder}\r\n                    value={this.state.query}\r\n                    onChange={this.handleChange}\r\n                    placeholder={placeholder}\r\n                />\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SearchBar;\r\n","import React from 'react';\r\n\r\nimport './dropdown.styles.scss';\r\n\r\nclass Dropdown extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            showItems: false,\r\n            selectedItem: this.props.initData\r\n        };\r\n    }\r\n\r\n    toggleDropdown = () => {\r\n        this.setState(state => ({ showItems: !state.showItems }));\r\n    };\r\n\r\n    handleSelect = event => {\r\n        const {\r\n            target: {\r\n                dataset: { value }\r\n            }\r\n        } = event;\r\n        this.setState({ selectedItem: value });\r\n        this.toggleDropdown();\r\n        // call another function passed by parent\r\n    };\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        const selectedItem = this.state.selectedItem;\r\n        if (prevState.selectedItem !== selectedItem) {\r\n            this.props.getSelectedItem(selectedItem);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { showItems, selectedItem } = this.state;\r\n\r\n        return (\r\n            <div className=\"dropdown\">\r\n                <div className=\"toggle-list\" onClick={this.toggleDropdown}>\r\n                    <span className=\"title-text\">{selectedItem || 'Filter by Region'}</span>\r\n                    <i className=\"fas fa-chevron-down\"></i>\r\n                </div>\r\n                {showItems && (\r\n                    <ul className=\"dropdown-items\">\r\n                        {this.props.dropdownItems.map(region => (\r\n                            <li\r\n                                key={region}\r\n                                onClick={this.handleSelect}\r\n                                className=\"dropdown-item\"\r\n                                data-value={region}\r\n                            >\r\n                                {region}\r\n                            </li>\r\n                        ))}\r\n                    </ul>\r\n                )}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Dropdown;\r\n","export const SESSION_KEY = 'countries-list';\r\n\r\nexport function persistToSession(data, key) {\r\n    window.sessionStorage.setItem(key, JSON.stringify(data));\r\n}\r\n\r\nexport async function getSessionDataAsync(key) {\r\n    let countries = JSON.parse(window.sessionStorage.getItem(key));\r\n    if (!countries) {\r\n        countries = await getCountries();\r\n        persistToSession(countries, key);\r\n    }\r\n    return countries;\r\n}\r\n\r\nexport async function getCountries() {\r\n    const request = new Request('https://restcountries.com/v2/all');\r\n    const response = await window.fetch(request);\r\n    let data = await response.json();\r\n    return data.reduce((map, countryData) => {\r\n        map[countryData.alpha3Code] = countryData;\r\n        return map;\r\n    }, {});\r\n}\r\n\r\nexport function formatNumberWithCommas(num) {\r\n    if (!num) return '';\r\n    return [...num.toString()].reverse().reduce((acc, n, idx) => {\r\n        if (idx % 3 === 0 && idx !== 0) return n + ',' + acc;\r\n        else return n + acc;\r\n    });\r\n}\r\n\r\n// https://stackoverflow.com/a/6969486/7771568\r\nexport function escapeRegExp(string) {\r\n    return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); // $& means the whole matched string\r\n}\r\n\r\nexport const getAllRegions = countries => {\r\n    const set = Object.keys(countries).reduce((set, key) => set.add(countries[key].region), new Set());\r\n    return [...set];\r\n};\r\n\r\n// TODO: add utility function that can append to query string.\r\n// It should be able to add be query params and override existing ones\r\n// example query => https://www.google.com/search?q=query+parameters&oq=query+parameters+&aqs=chrome..69i57j0l7.4103j1j7&sourceid=chrome&ie=UTF-8\r\nexport function addQueryParam(url, key, value) {\r\n    // Extract key values into object\r\n    const queryStartIndex = url.indexOf('?');\r\n    let baseUrl, queryString;\r\n\r\n    baseUrl = url.substring(0, queryStartIndex);\r\n    queryString = url.substring(queryStartIndex + 1);\r\n\r\n    if (!queryString || !queryString.includes('=') || queryStartIndex < 0) {\r\n        return url.replace('?', '') + '?' + key + '=' + value;\r\n    }\r\n    // add new key value to object\r\n    const queryMap = queryStrToObj(queryString);\r\n\r\n    const updatedQueryMap = { ...queryMap, [key]: value };\r\n\r\n    // serialize object to query value pair\r\n    const newQueryString = objToQueryString(updatedQueryMap);\r\n\r\n    return baseUrl + '?' + newQueryString;\r\n}\r\n\r\nfunction objToQueryString(obj) {\r\n    const queryKeys = Object.keys(obj);\r\n    const newQueryString = queryKeys\r\n        .reduce((str, querykey) => {\r\n            if (!obj[querykey]) {\r\n                return str;\r\n            }\r\n            return (str += `${querykey}=${obj[querykey]}&`); // generate querystring\r\n        }, '')\r\n        .trim() // trims whitespace\r\n        .replace(/&$/g, ''); // removes last '&'\r\n    return newQueryString;\r\n}\r\n\r\nexport function queryStrToObj(queryString) {\r\n    const queryStringArray = queryString.split('&');\r\n    const queryMap = queryStringArray.reduce((obj, kvPair) => {\r\n        const [k, v] = kvPair.split('=');\r\n        return { ...obj, [k]: v };\r\n    }, {});\r\n    return queryMap;\r\n}\r\n","import React from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\nimport { formatNumberWithCommas } from '../../utils/utils';\r\n\r\nimport './country-item.styles.scss';\r\n\r\nexport class CountryItem extends React.Component {\r\n    static defaultProps = {\r\n        countryName: 'Germany',\r\n        population: 81770900,\r\n        capital: 'Berlin',\r\n        region: 'Europe',\r\n        flagImg: 'sdsd'\r\n    };\r\n\r\n    render() {\r\n        const {\r\n            id,\r\n            countryName,\r\n            population,\r\n            capital,\r\n            region,\r\n            flagImg,\r\n            history,\r\n            highlightDetails\r\n        } = this.props;\r\n        const formattedNumber = formatNumberWithCommas(population);\r\n        const NO_INFO = 'Unknown';\r\n\r\n        const { index, length } = highlightDetails || {};\r\n\r\n        return (\r\n            <div className=\"country-item\" onClick={() => history.push(`/country/${id}`)}>\r\n                {/* <div className=\"img-container\" style={{ backgroundImage: `url(${flagImg})` }}> */}\r\n                <div className=\"img-container\">\r\n                    <img src={flagImg} alt={countryName} />\r\n                </div>\r\n                <div className=\"details\">\r\n                    <header>\r\n                        {highlightDetails ? (\r\n                            <>\r\n                                {countryName.substring(0, index)}\r\n                                <span className=\"highlight\">\r\n                                    {countryName.substring(index, index + length)}\r\n                                </span>\r\n                                {countryName.substring(index + length)}\r\n                            </>\r\n                        ) : (\r\n                            countryName\r\n                        )}\r\n                    </header>\r\n                    <p className=\"country-detail\">\r\n                        <span className=\"detail-title\">Population: </span>\r\n                        <span className=\"detail-description\">{formattedNumber || NO_INFO}</span>\r\n                    </p>\r\n                    <p className=\"country-detail\">\r\n                        <span className=\"detail-title\">Region: </span>\r\n                        <span className=\"detail-description\">{region || NO_INFO}</span>\r\n                    </p>\r\n                    <p className=\"country-detail\">\r\n                        <span className=\"detail-title\">Capital: </span>\r\n                        <span className=\"detail-description\">{capital || NO_INFO}</span>\r\n                    </p>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(CountryItem);\r\n","import React from 'react';\r\n\r\nimport './country-list-styles.scss';\r\n\r\nimport CountryItem from '../country-item/country-item.component';\r\n\r\nexport class CountryList extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"country-list\">\r\n                {this.props.countries.map(country => {\r\n                    return (\r\n                        <CountryItem\r\n                            key={country.alpha3Code}\r\n                            id={country.alpha3Code}\r\n                            countryName={country.name}\r\n                            population={country.population}\r\n                            capital={country.capital}\r\n                            region={country.region}\r\n                            flagImg={country.flag}\r\n                            highlightDetails={country.search}\r\n                        />\r\n                    );\r\n                })}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CountryList;\r\n","export const COUNTRY_REGIONS = {\r\n    All: 'All',\r\n    Africa: 'Africa',\r\n    Americas: 'Americas',\r\n    Asia: 'Asia',\r\n    Europe: 'Europe',\r\n    Oceania: 'Oceania',\r\n    Polar: 'Polar'\r\n};\r\n","import React from 'react';\r\n\r\nimport SearchBar from '../../components/searchBar/searchBar.component';\r\nimport Dropdown from '../../components/dropdown/dropdown.component';\r\nimport CountryList from '../../components/country-list/country-list.component';\r\n\r\nimport './homepage.styles.scss';\r\n\r\nimport {\r\n    getAllRegions,\r\n    SESSION_KEY,\r\n    getSessionDataAsync,\r\n    escapeRegExp,\r\n    addQueryParam,\r\n    queryStrToObj\r\n} from '../../utils/utils';\r\nimport { COUNTRY_REGIONS } from '../../utils/constants';\r\n\r\nconst SEARCH_TRIGGER_LENGTH = 2;\r\nconst SEARCH_DELAY = 500; // in ms\r\n\r\nclass HomePage extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.resetQuery = this.setQueryString();\r\n\r\n        const { location } = this.props;\r\n\r\n        let searchQuery = '';\r\n        let regionQuery = '';\r\n        // check if url has query params\r\n        // use the query params instead of state\r\n        if (location.search.trim()) {\r\n            // remove leading '?' character\r\n            const queryParams = location.search.replace('?', '');\r\n            const queryMap = queryStrToObj(queryParams);\r\n\r\n            searchQuery = window.decodeURIComponent(queryMap['query'] || '');\r\n            regionQuery = window.decodeURIComponent(queryMap['region'] || '');\r\n        }\r\n\r\n        this.state = {\r\n            searchQuery,\r\n            regionQuery,\r\n            allRegions: [],\r\n            countriesArray: []\r\n        };\r\n    }\r\n\r\n    resetQuery = null;\r\n\r\n    async componentDidMount() {\r\n        const countries = await getSessionDataAsync(SESSION_KEY);\r\n        const allRegions = ['All', ...getAllRegions(countries).sort()];\r\n        // convert stored data from object to array of country object\r\n        const countriesArray = Object.keys(countries).map(countryId => countries[countryId]);\r\n\r\n        this.setState({\r\n            allRegions,\r\n            countriesArray\r\n        });\r\n    }\r\n\r\n    updateSearchQuery = query => {\r\n        // only trigger search when the query is up to the SEARCH_TRIGGER_LENGTH\r\n        if (query.length >= SEARCH_TRIGGER_LENGTH) {\r\n            this.resetQuery(query);\r\n            this.setState({ searchQuery: query });\r\n        } else {\r\n            this.resetQuery('');\r\n            this.setState({ searchQuery: '' });\r\n        }\r\n    };\r\n\r\n    getRegionFilter = regionQuery => {\r\n        this.setState({ regionQuery });\r\n        const urlWithRegionParam = addQueryParam(window.location.search, 'region', regionQuery);\r\n        this.props.history.push(urlWithRegionParam);\r\n    };\r\n\r\n    // acts as a debounce for the onChange input event\r\n    // this minimizes the number of pages added to the browsers history\r\n    setQueryString = () => {\r\n        let timerId = null;\r\n\r\n        return query => {\r\n            window.clearTimeout(timerId);\r\n\r\n            // generate query string and removes empty queries by default\r\n            const urlWithQueryParam = addQueryParam(window.location.search, 'query', query);\r\n\r\n            timerId = window.setTimeout(() => {\r\n                this.props.history.push(urlWithQueryParam);\r\n            }, SEARCH_DELAY);\r\n        };\r\n    };\r\n\r\n    filterByRegion = (region, countries) => {\r\n        // filter countries based on the search region\r\n        const filteredCountries = countries.filter(country => {\r\n            if (region === COUNTRY_REGIONS.All) {\r\n                return true;\r\n            } else {\r\n                return country.region.toLowerCase().includes(region.toLowerCase());\r\n            }\r\n        });\r\n\r\n        return filteredCountries;\r\n    };\r\n\r\n    filterBySearch = (query, countries) => {\r\n        const queryLength = query.length;\r\n        const filteredCountries = countries.filter(country => {\r\n            const escapedQuery = escapeRegExp(query);\r\n            const re = new RegExp(escapedQuery, 'gi');\r\n            const index = country.name.search(re);\r\n\r\n            // remove previous search results if any\r\n            delete country.search;\r\n\r\n            if (index < 0) {\r\n                return false;\r\n            }\r\n\r\n            // adds a new property to the object only if a search query was made\r\n            if (queryLength > 0) {\r\n                country.search = {\r\n                    index: index,\r\n                    length: queryLength\r\n                };\r\n            }\r\n\r\n            return true;\r\n        });\r\n\r\n        return filteredCountries;\r\n    };\r\n\r\n    render() {\r\n        const { countriesArray, searchQuery, regionQuery } = this.state;\r\n\r\n        const filteredCountries = this.filterBySearch(\r\n            searchQuery,\r\n            this.filterByRegion(regionQuery, countriesArray)\r\n        );\r\n\r\n        return (\r\n            <div className=\"homepage\">\r\n                <div className=\"menu\">\r\n                    <SearchBar filterCountries={this.updateSearchQuery} initData={this.state.searchQuery} />\r\n                    <Dropdown\r\n                        dropdownItems={this.state.allRegions}\r\n                        initData={this.state.regionQuery}\r\n                        getSelectedItem={this.getRegionFilter}\r\n                    />\r\n                </div>\r\n                <CountryList countries={filteredCountries} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default HomePage;\r\n","import React from 'react';\r\nimport { withRouter, Link } from 'react-router-dom';\r\n\r\nimport { formatNumberWithCommas } from '../../utils/utils';\r\nimport './country-details.styles.scss';\r\n\r\nclass CountryDetail extends React.Component {\r\n    render() {\r\n        const {\r\n            name,\r\n            flag,\r\n            nativeName,\r\n            population,\r\n            region,\r\n            subregion,\r\n            capital=\"None\",\r\n            topLevelDomain,\r\n            currencies: _currencies,\r\n            languages: _languages\r\n        } = this.props.country || {};\r\n        const { borders: _borders } = this.props;\r\n\r\n        const borders = _borders.length > 0 ? _borders : [{ name: 'None', code: this.props.countryId }];\r\n        const currencies = _currencies?.map(curr => curr.name) ?? [\"None\"];\r\n        const languages = _languages?.map(lang => lang.name) ?? [\"None\"];\r\n\r\n        return (\r\n            <div className=\"country-details\">\r\n                <div className=\"country-img\">\r\n                    <img src={flag} alt={`flag of ${name}`} />\r\n                </div>\r\n                <div className=\"details-container\">\r\n                    <header>{name}</header>\r\n                    <div className=\"details\">\r\n                        <p className=\"country-detail\">\r\n                            <span className=\"detail-title\">Native Name: </span>\r\n                            <span className=\"detail-description\">{nativeName}</span>\r\n                        </p>\r\n                        <p className=\"country-detail\">\r\n                            <span className=\"detail-title\">Population: </span>\r\n                            <span className=\"detail-description\">{formatNumberWithCommas(population)}</span>\r\n                        </p>\r\n                        <p className=\"country-detail\">\r\n                            <span className=\"detail-title\">Region: </span>\r\n                            <span className=\"detail-description\">{region}</span>\r\n                        </p>\r\n                        <p className=\"country-detail\">\r\n                            <span className=\"detail-title\">Sub Region: </span>\r\n                            <span className=\"detail-description\">{subregion}</span>\r\n                        </p>\r\n                        <p className=\"country-detail\">\r\n                            <span className=\"detail-title\">Capital: </span>\r\n                            <span className=\"detail-description\">{capital}</span>\r\n                        </p>\r\n                        <p className=\"country-detail\">\r\n                            <span className=\"detail-title\">Top Level Domain: </span>\r\n                            <span className=\"detail-description\">{topLevelDomain}</span>\r\n                        </p>\r\n                        <p className=\"country-detail\">\r\n                            <span className=\"detail-title\">Currencies: </span>\r\n                            <span className=\"detail-description\">\r\n                                {currencies.length > 0 && currencies.join(', ')}\r\n                            </span>\r\n                        </p>\r\n                        <p className=\"country-detail\">\r\n                            <span className=\"detail-title\">Languages: </span>\r\n                            <span className=\"detail-description\">\r\n                                {languages.length > 0 && languages.join(', ')}\r\n                            </span>\r\n                        </p>\r\n                    </div>\r\n                    <div className=\"country-tags\">\r\n                        <span className=\"detail-title\">Border Countries: </span>\r\n                        <div className=\"tag-container\">\r\n                            {borders.length > 0 &&\r\n                                borders.map(country => (\r\n                                    <Link\r\n                                        to={`/country/${country.code}`}\r\n                                        key={country.code}\r\n                                        className=\"tag\"\r\n                                        // onClick={() => this.handleClick(country.code)}\r\n                                    >\r\n                                        {country.name}\r\n                                    </Link>\r\n                                ))}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(CountryDetail);\r\n","import React from 'react';\r\n\r\nimport { getSessionDataAsync, SESSION_KEY } from '../../utils/utils';\r\n\r\nimport CountryDetail from '../../components/country-details/country-details.component';\r\n\r\nimport './country-details-page.styles.scss';\r\n\r\nclass CountryDetailsPage extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            country: null,\r\n            borders: [],\r\n            countryId: this.props.match.params.countryId\r\n        };\r\n    }\r\n\r\n    async componentDidMount() {\r\n        const { match } = this.props;\r\n        const countryId = match.params.countryId.toUpperCase();\r\n        await this.updateState(countryId);\r\n    }\r\n\r\n    async componentDidUpdate(prevProps) {\r\n        const prevCountryId = prevProps.match.params.countryId.toUpperCase();\r\n        const countryId = this.props.match.params.countryId.toUpperCase();\r\n\r\n        if (countryId !== prevCountryId) {\r\n            await this.updateState(countryId);\r\n        }\r\n    }\r\n\r\n    async updateState(countryId) {\r\n        const countries = await getSessionDataAsync(SESSION_KEY);\r\n        const country = countries[countryId];\r\n        const borders = country.borders?.map(countryCode => {\r\n            return { name: countries[countryCode].name, code: countryCode };\r\n        }) ?? []\r\n        this.setState(state => ({\r\n            country,\r\n            borders,\r\n            countryId\r\n        }));\r\n    }\r\n\r\n    render() {\r\n        const { country, borders } = this.state;\r\n        return (\r\n            <div className=\"country-detail-page\">\r\n                <button className=\"go-back\" onClick={() => this.props.history.push('/')}>\r\n                    {' '}\r\n                    &#10550; Back\r\n                </button>\r\n                {this.state.country && (\r\n                    <CountryDetail borders={borders} country={country} countryId={this.state.countryId} />\r\n                )}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CountryDetailsPage;\r\n","import React from 'react';\r\nimport { Switch, Route } from 'react-router-dom';\r\n\r\nimport './App.scss';\r\n\r\nimport Header from './components/header/header.component';\r\nimport HomePage from './pages/homepage/homepage.component';\r\nimport CountryDetailsPage from './pages/country-details-page/country-details-page.component';\r\n\r\nclass App extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"App\">\r\n                <Header />\r\n                <Switch>\r\n                    <Route exact path=\"/\" component={HomePage} />\r\n                    <Route path=\"/country/:countryId\" component={CountryDetailsPage} />\r\n                </Switch>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { HashRouter } from 'react-router-dom';\r\n\r\nimport './index.css';\r\n\r\nimport App from './App';\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n    <HashRouter basename=\"/\">\r\n        <App />\r\n    </HashRouter>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}