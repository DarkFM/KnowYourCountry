{"version":3,"sources":["components/header/header.component.jsx","components/searchBar/searchBar.component.jsx","components/dropdown/dropdown.component.jsx","utils/utils.js","components/country-item/country-item.component.jsx","components/country-list/country-list.component.jsx","utils/constants.js","pages/homepage/homepage.component.jsx","components/country-details/country-details.component.jsx","pages/country-details-page/country-details-page.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","state","lightMode","toggleTheme","setState","prevProps","prevState","html","document","querySelector","this","dataset","className","onClick","React","Component","SearchBar","props","handleChange","target","name","value","query","initData","filterCountries","trim","placeholder","type","aria-label","onChange","defaultProps","Dropdown","toggleDropdown","showItems","handleSelect","event","selectedItem","getSelectedItem","dropdownItems","map","region","key","data-value","persistToSession","data","window","localStorage","setItem","JSON","stringify","getSessionDataAsync","a","async","countries","parse","getItem","getCountries","console","info","request","Request","fetch","response","json","reduce","countryData","alpha3Code","formatNumberWithCommas","num","toString","reverse","acc","n","idx","getAllRegions","set","Object","keys","add","Set","addQueryParam","url","baseUrl","queryString","queryStartIndex","indexOf","substring","includes","replace","obj","queryMap","queryStrToObj","updatedQueryMap","str","querykey","split","kvPair","k","v","CountryItem","id","countryName","population","capital","flagImg","history","highlightDetails","formattedNumber","index","length","push","src","alt","withRouter","CountryList","country","flag","search","COUNTRY_REGIONS","All","Africa","Americas","Asia","Europe","Oceania","Polar","SEARCH_TRIGGER_LENGTH","SEARCH_DELAY","HomePage","resetQuery","updateSearchQuery","searchQuery","getRegionFilter","regionQuery","urlWithRegionParam","location","setQueryString","timerId","clearTimeout","urlWithQueryParam","setTimeout","filterByRegion","filter","toLowerCase","filterBySearch","queryLength","escapedQuery","re","RegExp","decodeURIComponent","allRegions","countriesArray","sort","countryId","filteredCountries","CountryDetail","nativeName","subregion","topLevelDomain","_currencies","currencies","_languages","languages","_borders","borders","code","curr","lang","join","to","CountryDetailsPage","match","params","toUpperCase","updateState","prevCountryId","countryCode","App","exact","path","component","Boolean","hostname","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8504771f.chunk.js","sourcesContent":["import React from 'react';\n\nimport './header.styles.scss';\n\nclass Header extends React.Component {\n    state = {\n        lightMode: true\n    };\n\n    toggleTheme = () => {\n        this.setState({ lightMode: !this.state.lightMode });\n    };\n\n    componentDidUpdate(prevProps, prevState) {\n        var html = document.querySelector('html');\n        if (this.state.lightMode) {\n            html.dataset['theme'] = '';\n        } else {\n            html.dataset['theme'] = 'dark';\n        }\n    }\n\n    render() {\n        return (\n            <header className=\"header\">\n                <div className=\"container\">\n                    <h3 className=\"title\">Where in the world?</h3>\n                    <span className=\"theme-switch\" onClick={this.toggleTheme}>\n                        {this.state.lightMode ? (\n                            <>\n                                <span className=\"mode-icon light-mode\">\n                                    <i className=\"fas fa-moon\"></i>\n                                </span>\n                                Dark Mode\n                            </>\n                        ) : (\n                            <>\n                                <span className=\"mode-icon dark-mode\">\n                                    <i className=\"fas fa-sun\"></i>\n                                </span>\n                                Light Mode\n                            </>\n                        )}\n                    </span>\n                </div>\n            </header>\n        );\n    }\n}\nexport default Header;\n","import React from 'react';\n\nimport './searchBar.styles.scss';\n\nclass SearchBar extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            query: this.props.initData || ''\n        };\n    }\n    static defaultProps = {\n        placeholder: 'Search for a country...'\n    };\n\n    handleChange = ({ target: { name, value } }) => {\n        this.setState({ [name]: value });\n    };\n\n    componentDidMount() {\n        this.setState({ query: this.props.initData });\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        const query = this.state.query;\n\n        if (prevState.query !== query) {\n            this.props.filterCountries(this.state.query.trim());\n        }\n    }\n\n    render() {\n        const { placeholder } = this.props;\n        return (\n            <form className=\"search-bar\">\n                <i className=\"fas fa-search\"></i>\n                <input\n                    className=\"search-input\"\n                    name=\"query\"\n                    type=\"search\"\n                    aria-label={placeholder}\n                    value={this.state.query}\n                    onChange={this.handleChange}\n                    placeholder={placeholder}\n                />\n            </form>\n        );\n    }\n}\n\nexport default SearchBar;\n","import React from 'react';\n\nimport './dropdown.styles.scss';\n\nclass Dropdown extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            showItems: false,\n            selectedItem: this.props.initData\n        };\n    }\n\n    toggleDropdown = () => {\n        this.setState(state => ({ showItems: !state.showItems }));\n    };\n\n    handleSelect = event => {\n        const {\n            target: {\n                dataset: { value }\n            }\n        } = event;\n        this.setState({ selectedItem: value });\n        this.toggleDropdown();\n        // call another function passed by parent\n    };\n\n    componentDidUpdate(prevProps, prevState) {\n        const selectedItem = this.state.selectedItem;\n        if (prevState.selectedItem !== selectedItem) {\n            this.props.getSelectedItem(selectedItem);\n        }\n    }\n\n    render() {\n        const { showItems, selectedItem } = this.state;\n\n        return (\n            <div className=\"dropdown\">\n                <div className=\"toggle-list\" onClick={this.toggleDropdown}>\n                    <span className=\"title-text\">{selectedItem || 'Filter by Region'}</span>\n                    <i className=\"fas fa-chevron-down\"></i>\n                </div>\n                {showItems && (\n                    <ul className=\"dropdown-items\">\n                        {this.props.dropdownItems.map(region => (\n                            <li\n                                key={region}\n                                onClick={this.handleSelect}\n                                className=\"dropdown-item\"\n                                data-value={region}\n                            >\n                                {region}\n                            </li>\n                        ))}\n                    </ul>\n                )}\n            </div>\n        );\n    }\n}\n\nexport default Dropdown;\n","export const SESSION_KEY = 'countries-list';\n\nexport function persistToSession(data, key) {\n    window.localStorage.setItem(key, JSON.stringify(data));\n}\n\nexport async function getSessionDataAsync(key) {\n    let countries = JSON.parse(window.localStorage.getItem(key));\n    if (!countries) {\n        countries = await getCountries();\n        persistToSession(countries, key);\n    }\n    return countries;\n}\n\nexport async function getCountries() {\n    console.info('making a request to restcountries.eu');\n    const request = new Request('https://restcountries.eu/rest/v2/all');\n    const response = await window.fetch(request);\n    let data = await response.json();\n    return data.reduce((map, countryData) => {\n        map[countryData.alpha3Code] = countryData;\n        return map;\n    }, {});\n}\n\nexport function formatNumberWithCommas(num) {\n    if (!num) return '';\n    return [...num.toString()].reverse().reduce((acc, n, idx) => {\n        if (idx % 3 === 0 && idx !== 0) return n + ',' + acc;\n        else return n + acc;\n    });\n}\n\n// https://stackoverflow.com/a/6969486/7771568\nexport function escapeRegExp(string) {\n    return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); // $& means the whole matched string\n}\n\nexport const getAllRegions = countries => {\n    const set = Object.keys(countries).reduce((set, key) => set.add(countries[key].region), new Set());\n    return [...set];\n};\n\n// TODO: add utility function that can append to query string.\n// It should be able to add be query params and override existing ones\n// example query => https://www.google.com/search?q=query+parameters&oq=query+parameters+&aqs=chrome..69i57j0l7.4103j1j7&sourceid=chrome&ie=UTF-8\nexport function addQueryParam(url, key, value) {\n    // Extract key values into object\n    const queryStartIndex = url.indexOf('?');\n    let baseUrl, queryString;\n\n    baseUrl = url.substring(0, queryStartIndex);\n    queryString = url.substring(queryStartIndex + 1);\n\n    if (!queryString || !queryString.includes('=') || queryStartIndex < 0) {\n        return url.replace('?', '') + '?' + key + '=' + value;\n    }\n    // add new key value to object\n    const queryMap = queryStrToObj(queryString);\n\n    const updatedQueryMap = { ...queryMap, [key]: value };\n\n    // serialize object to query value pair\n    const newQueryString = objToQueryString(updatedQueryMap);\n\n    return baseUrl + '?' + newQueryString;\n}\n\nfunction objToQueryString(obj) {\n    const queryKeys = Object.keys(obj);\n    const newQueryString = queryKeys\n        .reduce((str, querykey) => {\n            if (!obj[querykey]) {\n                return str;\n            }\n            return (str += `${querykey}=${obj[querykey]}&`); // generate querystring\n        }, '')\n        .trim() // trims whitespace\n        .replace(/&$/g, ''); // removes last '&'\n    return newQueryString;\n}\n\nexport function queryStrToObj(queryString) {\n    const queryStringArray = queryString.split('&');\n    const queryMap = queryStringArray.reduce((obj, kvPair) => {\n        const [k, v] = kvPair.split('=');\n        return { ...obj, [k]: v };\n    }, {});\n    return queryMap;\n}\n","import React from 'react';\nimport { withRouter } from 'react-router-dom';\n\nimport { formatNumberWithCommas } from '../../utils/utils';\n\nimport './country-item.styles.scss';\n\nexport class CountryItem extends React.Component {\n    static defaultProps = {\n        countryName: 'Germany',\n        population: 81770900,\n        capital: 'Berlin',\n        region: 'Europe',\n        flagImg: 'sdsd'\n    };\n\n    render() {\n        const {\n            id,\n            countryName,\n            population,\n            capital,\n            region,\n            flagImg,\n            history,\n            highlightDetails\n        } = this.props;\n        const formattedNumber = formatNumberWithCommas(population);\n        const NO_INFO = 'Unknown';\n\n        const { index, length } = highlightDetails || {};\n\n        return (\n            <div className=\"country-item\" onClick={() => history.push(`/country/${id}`)}>\n                {/* <div className=\"img-container\" style={{ backgroundImage: `url(${flagImg})` }}> */}\n                <div className=\"img-container\">\n                    <img src={flagImg} alt={countryName} />\n                </div>\n                <div className=\"details\">\n                    <header>\n                        {highlightDetails ? (\n                            <>\n                                {countryName.substring(0, index)}\n                                <span className=\"highlight\">\n                                    {countryName.substring(index, index + length)}\n                                </span>\n                                {countryName.substring(index + length)}\n                            </>\n                        ) : (\n                            countryName\n                        )}\n                    </header>\n                    <p className=\"country-detail\">\n                        <span className=\"detail-title\">Population: </span>\n                        <span className=\"detail-description\">{formattedNumber || NO_INFO}</span>\n                    </p>\n                    <p className=\"country-detail\">\n                        <span className=\"detail-title\">Region: </span>\n                        <span className=\"detail-description\">{region || NO_INFO}</span>\n                    </p>\n                    <p className=\"country-detail\">\n                        <span className=\"detail-title\">Capital: </span>\n                        <span className=\"detail-description\">{capital || NO_INFO}</span>\n                    </p>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default withRouter(CountryItem);\n","import React from 'react';\n\nimport './country-list-styles.scss';\n\nimport CountryItem from '../country-item/country-item.component';\n\nexport class CountryList extends React.Component {\n    render() {\n        return (\n            <div className=\"country-list\">\n                {this.props.countries.map(country => {\n                    return (\n                        <CountryItem\n                            key={country.alpha3Code}\n                            id={country.alpha3Code}\n                            countryName={country.name}\n                            population={country.population}\n                            capital={country.capital}\n                            region={country.region}\n                            flagImg={country.flag}\n                            highlightDetails={country.search}\n                        />\n                    );\n                })}\n            </div>\n        );\n    }\n}\n\nexport default CountryList;\n","export const COUNTRY_REGIONS = {\n    All: 'All',\n    Africa: 'Africa',\n    Americas: 'Americas',\n    Asia: 'Asia',\n    Europe: 'Europe',\n    Oceania: 'Oceania',\n    Polar: 'Polar'\n};\n","import React from 'react';\n\nimport SearchBar from '../../components/searchBar/searchBar.component';\nimport Dropdown from '../../components/dropdown/dropdown.component';\nimport CountryList from '../../components/country-list/country-list.component';\n\nimport './homepage.styles.scss';\n\nimport {\n    getAllRegions,\n    SESSION_KEY,\n    getSessionDataAsync,\n    escapeRegExp,\n    addQueryParam,\n    queryStrToObj\n} from '../../utils/utils';\nimport { COUNTRY_REGIONS } from '../../utils/constants';\n\nconst SEARCH_TRIGGER_LENGTH = 2;\nconst SEARCH_DELAY = 500; // in ms\n\nclass HomePage extends React.Component {\n    constructor(props) {\n        super(props);\n        this.resetQuery = this.setQueryString();\n\n        const { location } = this.props;\n\n        let searchQuery = '';\n        let regionQuery = '';\n        // check if url has query params\n        // use the query params instead of state\n        if (location.search.trim()) {\n            // remove leading '?' character\n            const queryParams = location.search.replace('?', '');\n            const queryMap = queryStrToObj(queryParams);\n\n            searchQuery = window.decodeURIComponent(queryMap['query'] || '');\n            regionQuery = window.decodeURIComponent(queryMap['region'] || '');\n        }\n\n        this.state = {\n            searchQuery,\n            regionQuery,\n            allRegions: [],\n            countriesArray: []\n        };\n    }\n\n    resetQuery = null;\n\n    async componentDidMount() {\n        const countries = await getSessionDataAsync(SESSION_KEY);\n        const allRegions = ['All', ...getAllRegions(countries).sort()];\n        // convert stored data from object to array of country object\n        const countriesArray = Object.keys(countries).map(countryId => countries[countryId]);\n\n        this.setState({\n            allRegions,\n            countriesArray\n        });\n    }\n\n    updateSearchQuery = query => {\n        // only trigger search when the query is up to the SEARCH_TRIGGER_LENGTH\n        if (query.length >= SEARCH_TRIGGER_LENGTH) {\n            this.resetQuery(query);\n            this.setState({ searchQuery: query });\n        } else {\n            this.resetQuery('');\n            this.setState({ searchQuery: '' });\n        }\n    };\n\n    getRegionFilter = regionQuery => {\n        this.setState({ regionQuery });\n        const urlWithRegionParam = addQueryParam(window.location.search, 'region', regionQuery);\n        this.props.history.push(urlWithRegionParam);\n    };\n\n    // acts as a debounce for the onChange input event\n    // this minimizes the number of pages added to the browsers history\n    setQueryString = () => {\n        let timerId = null;\n\n        return query => {\n            window.clearTimeout(timerId);\n\n            // generate query string and removes empty queries by default\n            const urlWithQueryParam = addQueryParam(window.location.search, 'query', query);\n\n            timerId = window.setTimeout(() => {\n                this.props.history.push(urlWithQueryParam);\n            }, SEARCH_DELAY);\n        };\n    };\n\n    filterByRegion = (region, countries) => {\n        // filter countries based on the search region\n        const filteredCountries = countries.filter(country => {\n            if (region === COUNTRY_REGIONS.All) {\n                return true;\n            } else {\n                return country.region.toLowerCase().includes(region.toLowerCase());\n            }\n        });\n\n        return filteredCountries;\n    };\n\n    filterBySearch = (query, countries) => {\n        const queryLength = query.length;\n        const filteredCountries = countries.filter(country => {\n            const escapedQuery = escapeRegExp(query);\n            const re = new RegExp(escapedQuery, 'gi');\n            const index = country.name.search(re);\n\n            // remove previous search results if any\n            delete country.search;\n\n            if (index < 0) {\n                return false;\n            }\n\n            // adds a new property to the object only if a search query was made\n            if (queryLength > 0) {\n                country.search = {\n                    index: index,\n                    length: queryLength\n                };\n            }\n\n            return true;\n        });\n\n        return filteredCountries;\n    };\n\n    render() {\n        const { countriesArray, searchQuery, regionQuery } = this.state;\n\n        const filteredCountries = this.filterBySearch(\n            searchQuery,\n            this.filterByRegion(regionQuery, countriesArray)\n        );\n\n        return (\n            <div className=\"homepage\">\n                <div className=\"menu\">\n                    <SearchBar filterCountries={this.updateSearchQuery} initData={this.state.searchQuery} />\n                    <Dropdown\n                        dropdownItems={this.state.allRegions}\n                        initData={this.state.regionQuery}\n                        getSelectedItem={this.getRegionFilter}\n                    />\n                </div>\n                <CountryList countries={filteredCountries} />\n            </div>\n        );\n    }\n}\n\nexport default HomePage;\n","import React from 'react';\nimport { withRouter, Link } from 'react-router-dom';\n\nimport { formatNumberWithCommas } from '../../utils/utils';\nimport './country-details.styles.scss';\n\nclass CountryDetail extends React.Component {\n    render() {\n        const {\n            name,\n            flag,\n            nativeName,\n            population,\n            region,\n            subregion,\n            capital,\n            topLevelDomain,\n            currencies: _currencies,\n            languages: _languages\n        } = this.props.country || {};\n        const { borders: _borders } = this.props;\n\n        const borders = _borders.length > 0 ? _borders : [{ name: 'None', code: this.props.countryId }];\n        const currencies = _currencies.map(curr => curr.name);\n        const languages = _languages.map(lang => lang.name);\n\n        return (\n            <div className=\"country-details\">\n                <div className=\"country-img\">\n                    <img src={flag} alt={`flag of ${name}`} />\n                </div>\n                <div className=\"details-container\">\n                    <header>{name}</header>\n                    <div className=\"details\">\n                        <p className=\"country-detail\">\n                            <span className=\"detail-title\">Native Name: </span>\n                            <span className=\"detail-description\">{nativeName}</span>\n                        </p>\n                        <p className=\"country-detail\">\n                            <span className=\"detail-title\">Population: </span>\n                            <span className=\"detail-description\">{formatNumberWithCommas(population)}</span>\n                        </p>\n                        <p className=\"country-detail\">\n                            <span className=\"detail-title\">Region: </span>\n                            <span className=\"detail-description\">{region}</span>\n                        </p>\n                        <p className=\"country-detail\">\n                            <span className=\"detail-title\">Sub Region: </span>\n                            <span className=\"detail-description\">{subregion}</span>\n                        </p>\n                        <p className=\"country-detail\">\n                            <span className=\"detail-title\">Capital: </span>\n                            <span className=\"detail-description\">{capital}</span>\n                        </p>\n                        <p className=\"country-detail\">\n                            <span className=\"detail-title\">Top Level Domain: </span>\n                            <span className=\"detail-description\">{topLevelDomain}</span>\n                        </p>\n                        <p className=\"country-detail\">\n                            <span className=\"detail-title\">Currencies: </span>\n                            <span className=\"detail-description\">\n                                {currencies.length > 0 && currencies.join(', ')}\n                            </span>\n                        </p>\n                        <p className=\"country-detail\">\n                            <span className=\"detail-title\">Languages: </span>\n                            <span className=\"detail-description\">\n                                {languages.length > 0 && languages.join(', ')}\n                            </span>\n                        </p>\n                    </div>\n                    <div className=\"country-tags\">\n                        <span className=\"detail-title\">Border Countries: </span>\n                        <div className=\"tag-container\">\n                            {borders.length > 0 &&\n                                borders.map(country => (\n                                    <Link\n                                        to={`/country/${country.code}`}\n                                        key={country.code}\n                                        className=\"tag\"\n                                        // onClick={() => this.handleClick(country.code)}\n                                    >\n                                        {country.name}\n                                    </Link>\n                                ))}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default withRouter(CountryDetail);\n","import React from 'react';\n\nimport { getSessionDataAsync, SESSION_KEY } from '../../utils/utils';\n\nimport CountryDetail from '../../components/country-details/country-details.component';\n\nimport './country-details-page.styles.scss';\n\nclass CountryDetailsPage extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            country: null,\n            borders: [],\n            countryId: this.props.match.params.countryId\n        };\n    }\n\n    async componentDidMount() {\n        const { match } = this.props;\n        const countryId = match.params.countryId.toUpperCase();\n        await this.updateState(countryId);\n    }\n\n    async componentDidUpdate(prevProps) {\n        const prevCountryId = prevProps.match.params.countryId.toUpperCase();\n        const countryId = this.props.match.params.countryId.toUpperCase();\n\n        if (countryId !== prevCountryId) {\n            await this.updateState(countryId);\n        }\n    }\n\n    async updateState(countryId) {\n        const countries = await getSessionDataAsync(SESSION_KEY);\n        const country = countries[countryId];\n        const borders = country.borders.map(countryCode => {\n            return { name: countries[countryCode].name, code: countryCode };\n        });\n        this.setState(state => ({\n            country,\n            borders,\n            countryId\n        }));\n    }\n\n    render() {\n        const { country, borders } = this.state;\n        return (\n            <div className=\"country-detail-page\">\n                <button className=\"go-back\" onClick={() => this.props.history.push('/')}>\n                    {' '}\n                    &#10550; Back\n                </button>\n                {this.state.country && (\n                    <CountryDetail borders={borders} country={country} countryId={this.state.countryId} />\n                )}\n            </div>\n        );\n    }\n}\n\nexport default CountryDetailsPage;\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\n\nimport './App.scss';\n\nimport Header from './components/header/header.component';\nimport HomePage from './pages/homepage/homepage.component';\nimport CountryDetailsPage from './pages/country-details-page/country-details-page.component';\n\nclass App extends React.Component {\n    render() {\n        return (\n            <div className=\"App\">\n                <Header />\n                <Switch>\n                    <Route exact path=\"/\" component={HomePage} />\n                    <Route path=\"/country/:countryId\" component={CountryDetailsPage} />\n                </Switch>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport './index.css';\n\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}